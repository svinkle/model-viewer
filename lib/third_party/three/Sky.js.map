{"version":3,"file":"Sky.js","sourceRoot":"","sources":["../../../src/third_party/three/Sky.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author zz85 / https://github.com/zz85\n *\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * http://www.cs.utah.edu/~shirley/papers/sunsky/sunsky.pdf\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n*/\n\nimport * as THREE from 'three';\n\nconst Sky = function () {\n\n\tvar shader = Sky.SkyShader;\n\n\tvar material = new THREE.ShaderMaterial( {\n\t\tfragmentShader: shader.fragmentShader,\n\t\tvertexShader: shader.vertexShader,\n\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\n\t\tside: THREE.BackSide\n\t} );\n\n\tTHREE.Mesh.call( this, new THREE.BoxBufferGeometry( 1, 1, 1 ), material );\n\n};\n\nSky.prototype = Object.create( THREE.Mesh.prototype );\n\nSky.SkyShader = {\n\n\tuniforms: {\n\t\tluminance: { value: 1 },\n\t\tturbidity: { value: 2 },\n\t\trayleigh: { value: 1 },\n\t\tmieCoefficient: { value: 0.005 },\n\t\tmieDirectionalG: { value: 0.8 },\n\t\tsunPosition: { value: new THREE.Vector3() }\n\t},\n\n\tvertexShader: [\n\t\t'uniform vec3 sunPosition;',\n\t\t'uniform float rayleigh;',\n\t\t'uniform float turbidity;',\n\t\t'uniform float mieCoefficient;',\n\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t'const vec3 up = vec3( 0.0, 1.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float e = 2.71828182845904523536028747135266249775724709369995957;',\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t// wavelength of used primaries, according to preetham\n\t\t'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );',\n\t\t// this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n\t\t// (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n\t\t'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );',\n\n\t\t// mie stuff\n\t\t// K coefficient for the primaries\n\t\t'const float v = 4.0;',\n\t\t'const vec3 K = vec3( 0.686, 0.678, 0.666 );',\n\t\t// MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n\t\t'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );',\n\n\t\t// earth shadow hack\n\t\t// cutoffAngle = pi / 1.95;\n\t\t'const float cutoffAngle = 1.6110731556870734;',\n\t\t'const float steepness = 1.5;',\n\t\t'const float EE = 1000.0;',\n\n\t\t'float sunIntensity( float zenithAngleCos ) {',\n\t\t'\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );',\n\t\t'\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );',\n\t\t'}',\n\n\t\t'vec3 totalMie( float T ) {',\n\t\t'\tfloat c = ( 0.2 * T ) * 10E-18;',\n\t\t'\treturn 0.434 * c * MieConst;',\n\t\t'}',\n\n\t\t'void main() {',\n\n\t\t'\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );',\n\t\t'\tvWorldPosition = worldPosition.xyz;',\n\n\t\t'\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',\n\t\t'\tgl_Position.z = gl_Position.w;', // set z to camera.far\n\n\t\t'\tvSunDirection = normalize( sunPosition );',\n\n\t\t'\tvSunE = sunIntensity( dot( vSunDirection, up ) );',\n\n\t\t'\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );',\n\n\t\t'\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );',\n\n\t\t// extinction (absorbtion + out scattering)\n\t\t// rayleigh coefficients\n\t\t'\tvBetaR = totalRayleigh * rayleighCoefficient;',\n\n\t\t// mie coefficients\n\t\t'\tvBetaM = totalMie( turbidity ) * mieCoefficient;',\n\n\t\t'}'\n\t].join( '\\n' ),\n\n\tfragmentShader: [\n\t\t'varying vec3 vWorldPosition;',\n\t\t'varying vec3 vSunDirection;',\n\t\t'varying float vSunfade;',\n\t\t'varying vec3 vBetaR;',\n\t\t'varying vec3 vBetaM;',\n\t\t'varying float vSunE;',\n\n\t\t'uniform float luminance;',\n\t\t'uniform float mieDirectionalG;',\n\n\t\t'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );',\n\n\t\t// constants for atmospheric scattering\n\t\t'const float pi = 3.141592653589793238462643383279502884197169;',\n\n\t\t'const float n = 1.0003;', // refractive index of air\n\t\t'const float N = 2.545E25;', // number of molecules per unit volume for air at\n\t\t\t\t\t\t\t\t\t// 288.15K and 1013mb (sea level -45 celsius)\n\n\t\t// optical length at zenith for molecules\n\t\t'const float rayleighZenithLength = 8.4E3;',\n\t\t'const float mieZenithLength = 1.25E3;',\n\t\t'const vec3 up = vec3( 0.0, 1.0, 0.0 );',\n\t\t// 66 arc seconds -> degrees, and the cosine of that\n\t\t'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;',\n\n\t\t// 3.0 / ( 16.0 * pi )\n\t\t'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;',\n\t\t// 1.0 / ( 4.0 * pi )\n\t\t'const float ONE_OVER_FOURPI = 0.07957747154594767;',\n\n\t\t'float rayleighPhase( float cosTheta ) {',\n\t\t'\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );',\n\t\t'}',\n\n\t\t'float hgPhase( float cosTheta, float g ) {',\n\t\t'\tfloat g2 = pow( g, 2.0 );',\n\t\t'\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );',\n\t\t'\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );',\n\t\t'}',\n\n\t\t// Filmic ToneMapping http://filmicgames.com/archives/75\n\t\t'const float A = 0.15;',\n\t\t'const float B = 0.50;',\n\t\t'const float C = 0.10;',\n\t\t'const float D = 0.20;',\n\t\t'const float E = 0.02;',\n\t\t'const float F = 0.30;',\n\n\t\t'const float whiteScale = 1.0748724675633854;', // 1.0 / Uncharted2Tonemap(1000.0)\n\n\t\t'vec3 Uncharted2Tonemap( vec3 x ) {',\n\t\t'\treturn ( ( x * ( A * x + C * B ) + D * E ) / ( x * ( A * x + B ) + D * F ) ) - E / F;',\n\t\t'}',\n\n\n\t\t'void main() {',\n\t\t// optical length\n\t\t// cutoff angle at 90 to avoid singularity in next formula.\n\t\t'\tfloat zenithAngle = acos( max( 0.0, dot( up, normalize( vWorldPosition - cameraPos ) ) ) );',\n\t\t'\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );',\n\t\t'\tfloat sR = rayleighZenithLength * inverse;',\n\t\t'\tfloat sM = mieZenithLength * inverse;',\n\n\t\t// combined extinction factor\n\t\t'\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );',\n\n\t\t// in scattering\n\t\t'\tfloat cosTheta = dot( normalize( vWorldPosition - cameraPos ), vSunDirection );',\n\n\t\t'\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );',\n\t\t'\tvec3 betaRTheta = vBetaR * rPhase;',\n\n\t\t'\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );',\n\t\t'\tvec3 betaMTheta = vBetaM * mPhase;',\n\n\t\t'\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );',\n\t\t'\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );',\n\n\t\t// nightsky\n\t\t'\tvec3 direction = normalize( vWorldPosition - cameraPos );',\n\t\t'\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]',\n\t\t'\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]',\n\t\t'\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );',\n\t\t'\tvec3 L0 = vec3( 0.1 ) * Fex;',\n\n\t\t// composition + solar disc\n\t\t'\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );',\n\t\t'\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;',\n\n\t\t'\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );',\n\n\t\t'\tvec3 curr = Uncharted2Tonemap( ( log2( 2.0 / pow( luminance, 4.0 ) ) ) * texColor );',\n\t\t'\tvec3 color = curr * whiteScale;',\n\n\t\t'\tvec3 retColor = pow( color, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );',\n\n\t\t'\tgl_FragColor = vec4( retColor, 1.0 );',\n\n\t\t'}'\n\t].join( '\\n' )\n\n};\n\nexport default Sky;\n"]}