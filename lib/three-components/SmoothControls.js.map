{"version":3,"file":"SmoothControls.js","sourceRoot":"","sources":["../../src/three-components/SmoothControls.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Camera, EventDispatcher, Quaternion, Spherical, Vector2, Vector3} from 'three';\n\nimport {clamp, step} from '../utils.js';\n\nexport type EventHandlingBehavior = 'prevent-all'|'prevent-handled';\nexport type InteractionPolicy = 'always-allow'|'allow-when-focused';\nexport type TouchMode = 'rotate'|'zoom';\n\nexport interface SmoothControlsOptions {\n  // The closest the camera can be to the target\n  minimumRadius?: number;\n  // The farthest the camera can be from the target\n  maximumRadius?: number;\n  // The minimum angle between model-up and the camera polar position\n  minimumPolarAngle?: number;\n  // The maximum angle between model-up and the camera polar position\n  maximumPolarAngle?: number;\n  // The minimum angle between model-forward and the camera azimuthal position\n  minimumAzimuthalAngle?: number;\n  // The maximum angle between model-forward and the camera azimuthal position\n  maximumAzimuthalAngle?: number;\n  // The distance from the target orbital position where deceleration will begin\n  decelerationMargin?: number;\n  // The rate of acceleration as the camera starts to change orbital position\n  // The value is measured in world-meters-per-frame-per-frame\n  acceleration?: number;\n  // A scalar in 0..1 that changes the dampening factor, corresponding to\n  // factors from 0.05..0.3\n  dampeningScale?: number;\n  // Controls when events will be cancelled (always, or only when handled)\n  eventHandlingBehavior?: EventHandlingBehavior;\n  // Controls when interaction is allowed (always, or only when focused)\n  interactionPolicy?: InteractionPolicy;\n}\n\nexport const DEFAULT_OPTIONS = Object.freeze<SmoothControlsOptions>({\n  minimumRadius: 8,\n  maximumRadius: 32,\n  minimumPolarAngle: Math.PI / 8,\n  maximumPolarAngle: Math.PI - Math.PI / 8,\n  minimumAzimuthalAngle: -Infinity,\n  maximumAzimuthalAngle: Infinity,\n  decelerationMargin: 0.25,\n  acceleration: 0.15,\n  dampeningScale: 0.5,\n  eventHandlingBehavior: 'prevent-all',\n  interactionPolicy: 'allow-when-focused'\n});\n\n\n/**\n * This quick and dirty helper allows us to use Vector3's magnitude\n * implementation without allocating temporary Vector3 instances.\n */\nconst magnitude = (() => {\n  const vector3 = new Vector3();\n\n  return (x: number, y: number, z: number) => vector3.set(x, y, z).length();\n})();\n\n// A Vector3 for holding interstitial values while converting Vector3 positions\n// to spherical values. Should only be used as an internal implementation detail\n// of the $positionToSpherical method on SmoothControls!\nconst vector3 = new Vector3();\n\n// Internal orbital position state\nconst $options = Symbol('options');\nconst $upQuaternion = Symbol('upQuaternion');\nconst $upQuaternionInverse = Symbol('upQuaternionInverse');\nconst $spherical = Symbol('spherical');\nconst $targetSpherical = Symbol('targetSpherical');\nconst $velocity = Symbol('velocity');\nconst $dampeningFactor = Symbol('dampeningFactor');\nconst $touchMode = Symbol('touchMode');\nconst $previousPosition = Symbol('previousPosition');\nconst $canInteract = Symbol('canInteract');\n\n// Pointer state\nconst $pointerIsDown = Symbol('pointerIsDown');\nconst $lastPointerPosition = Symbol('lastPointerPosition');\nconst $lastTouches = Symbol('lastTouches');\n\n// Value conversion methods\nconst $pixelLengthToSphericalAngle = Symbol('pixelLengthToSphericalAngle');\nconst $positionToSpherical = Symbol('positionToSpherical');\nconst $sphericalToPosition = Symbol('sphericalToPosition');\nconst $twoTouchDistance = Symbol('twoTouchDistance');\n\n// Event handlers\nconst $onMouseMove = Symbol('onMouseMove');\nconst $onMouseDown = Symbol('onMouseDown');\nconst $onMouseUp = Symbol('onMouseUp');\nconst $onTouchStart = Symbol('onTouchStart');\nconst $onTouchEnd = Symbol('onTouchEnd');\nconst $onTouchMove = Symbol('onTouchMove');\nconst $onWheel = Symbol('onWheel');\nconst $onKeyDown = Symbol('onKeyDown');\nconst $handlePointerMove = Symbol('handlePointerMove');\nconst $handlePointerDown = Symbol('handlePointerDown');\nconst $handlePointerUp = Symbol('handlePointerUp');\nconst $handleWheel = Symbol('handleWheel');\nconst $handleKey = Symbol('handleKey');\n\n// Constants\nconst TOUCH_EVENT_RE = /^touch(start|end|move)$/;\nconst KEYBOARD_ORBIT_INCREMENT = Math.PI / 8;\nconst ORBIT_STEP_EDGE = 0.001;\nconst MAXIMUM_DAMPENING_FACTOR = 0.05;\nconst MINIMUM_DAMPENING_FACTOR = 0.3;\nconst FRAME_MILLISECONDS = 1000.0 / 60.0;\nconst TAU = 2 * Math.PI;\nconst UP = new Vector3(0, 1, 0);\n\nexport const KeyCode = {\n  PAGE_UP: 33,\n  PAGE_DOWN: 34,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40\n};\n\n\n/**\n * SmoothControls is a Three.js helper for adding delightful pointer and\n * keyboard-based input to a staged Three.js scene. Its API is very similar to\n * OrbitControls, but it offers more opinionated (subjectively more delightful)\n * defaults, easy extensibility and subjectively better out-of-the-box keyboard\n * support.\n *\n * One important change compared to OrbitControls is that the `update` method\n * of SmoothControls must be invoked on every frame, otherwise the controls\n * will not have an effect.\n *\n * Another notable difference compared to OrbitControls is that SmoothControls\n * does not currently support panning (but probably will in a future revision).\n *\n * Like OrbitControls, SmoothControls assumes that the orientation of the camera\n * has been set in terms of position, rotation and scale, so it is important to\n * ensure that the camera's matrixWorld is in sync before using SmoothControls.\n */\nexport class SmoothControls extends EventDispatcher {\n  private[$options]: SmoothControlsOptions;\n  private[$upQuaternion]: Quaternion = new Quaternion();\n  private[$upQuaternionInverse]: Quaternion = new Quaternion();\n  private[$spherical]: Spherical = new Spherical();\n  private[$targetSpherical]: Spherical = new Spherical();\n  private[$previousPosition]: Vector3 = new Vector3();\n\n  private[$pointerIsDown]: boolean = false;\n  private[$lastPointerPosition]: Vector2 = new Vector2();\n  private[$lastTouches]: TouchList;\n  private[$touchMode]: TouchMode;\n\n  private[$onMouseMove]: (event: Event) => void;\n  private[$onMouseDown]: (event: Event) => void;\n  private[$onMouseUp]: (event: Event) => void;\n  private[$onWheel]: (event: Event) => void;\n  private[$onKeyDown]: (event: Event) => void;\n\n  private[$onTouchStart]: (event: Event) => void;\n  private[$onTouchEnd]: (event: Event) => void;\n  private[$onTouchMove]: (event: Event) => void;\n\n  private[$velocity]: number = 0;\n\n  // The target position that the camera will orbit around\n  readonly target: Vector3 = new Vector3();\n\n  constructor(readonly camera: Camera, readonly element: HTMLElement) {\n    super();\n\n    this[$upQuaternion].setFromUnitVectors(camera.up, UP);\n    this[$upQuaternionInverse].copy(this[$upQuaternion]).inverse();\n\n    this[$onMouseMove] = (event: Event) =>\n        this[$handlePointerMove](event as MouseEvent);\n    this[$onMouseDown] = (event: Event) =>\n        this[$handlePointerDown](event as MouseEvent);\n    this[$onMouseUp] = (event: Event) =>\n        this[$handlePointerUp](event as MouseEvent);\n    this[$onWheel] = (event: Event) => this[$handleWheel](event as WheelEvent);\n    this[$onKeyDown] = (event: Event) =>\n        this[$handleKey](event as KeyboardEvent);\n    this[$onTouchStart] = (event: Event) =>\n        this[$handlePointerDown](event as TouchEvent);\n    this[$onTouchEnd] = (event: Event) =>\n        this[$handlePointerUp](event as TouchEvent);\n    this[$onTouchMove] = (event: Event) =>\n        this[$handlePointerMove](event as TouchEvent);\n\n    element.addEventListener('mousemove', this[$onMouseMove]);\n    element.addEventListener('mousedown', this[$onMouseDown]);\n    element.addEventListener('wheel', this[$onWheel]);\n    element.addEventListener('keydown', this[$onKeyDown]);\n    element.addEventListener('touchstart', this[$onTouchStart]);\n    element.addEventListener('touchmove', this[$onTouchMove]);\n\n    self.addEventListener('mouseup', this[$onMouseUp]);\n    self.addEventListener('touchend', this[$onTouchEnd]);\n\n    element.style.cursor = 'grab';\n\n    this[$previousPosition].copy(this.camera.position);\n    this[$positionToSpherical](this.camera.position, this[$spherical]);\n    this[$targetSpherical].copy(this[$spherical]);\n\n    this[$options] = Object.assign({}, DEFAULT_OPTIONS);\n\n    this.setOrbit();\n  }\n\n  /**\n   * Clean up event handlers that are added to the configured element. Invoke\n   * this when getting rid of the controls, otherwise listeners will leak!\n   */\n  dispose() {\n    this.element.removeEventListener('mousemove', this[$onMouseMove]);\n    this.element.removeEventListener('mousedown', this[$onMouseDown]);\n    this.element.removeEventListener('wheel', this[$onWheel]);\n    this.element.removeEventListener('keydown', this[$onKeyDown]);\n    this.element.removeEventListener('touchstart', this[$onTouchStart]);\n    this.element.removeEventListener('touchmove', this[$onTouchMove]);\n\n    self.removeEventListener('mouseup', this[$onMouseUp]);\n    self.removeEventListener('touchend', this[$onTouchEnd]);\n\n    this.element.style.cursor = '';\n  }\n\n  /**\n   * The options that are currently configured for the controls instance.\n   */\n  get options() {\n    return this[$options];\n  }\n\n  /**\n   * Copy the spherical values that represent the current camera orbital\n   * position relative to the configured target into a provided Spherical\n   * instance. If no Spherical is provided, a new Spherical will be allocated\n   * to copy the values into. The Spherical that values are copied into is\n   * returned.\n   */\n  getCameraSpherical(target: Spherical = new Spherical()) {\n    return target.copy(this[$spherical]);\n  }\n\n  /**\n   * Configure the options of the controls. Configured options will be\n   * merged with whatever options have already been configured for this\n   * controls instance.\n   */\n  applyOptions(options: SmoothControlsOptions) {\n    Object.assign(this[$options], options);\n    // Re-evaluates clamping based on potentially new values for min/max\n    // polar, azimuth and radius:\n    this.setOrbit();\n    // Prevent interpolation in the case that any target spherical values\n    // changed (preserving OrbitalControls behavior):\n    this[$spherical].copy(this[$targetSpherical]);\n  }\n\n  /**\n   * Set the absolute orbital position of the camera relative to the configured\n   * target. The change will be applied over a number of frames depending\n   * on configured acceleration and dampening options.\n   *\n   * Returns true if invoking the method will result in the camera changing\n   * position and/or rotation, otherwise false.\n   */\n  setOrbit(\n      targetTheta: number = this[$targetSpherical].theta,\n      targetPhi: number = this[$targetSpherical].phi,\n      targetRadius: number = this[$targetSpherical].radius): boolean {\n    const {\n      minimumAzimuthalAngle,\n      maximumAzimuthalAngle,\n      minimumPolarAngle,\n      maximumPolarAngle,\n      minimumRadius,\n      maximumRadius\n    } = this[$options];\n\n    const {theta, phi, radius} = this[$targetSpherical];\n\n    const nextTheta =\n        clamp(targetTheta, minimumAzimuthalAngle!, maximumAzimuthalAngle!);\n    const nextPhi = clamp(targetPhi, minimumPolarAngle!, maximumPolarAngle!);\n    const nextRadius = clamp(targetRadius, minimumRadius!, maximumRadius!);\n\n    if (nextTheta === theta && nextPhi === phi && nextRadius === radius) {\n      return false;\n    }\n\n    this[$targetSpherical].theta = nextTheta;\n    this[$targetSpherical].phi = nextPhi;\n    this[$targetSpherical].radius = nextRadius;\n    this[$targetSpherical].makeSafe();\n\n    return true;\n  }\n\n  /**\n   * Adjust the orbital position of the camera relative to its current orbital\n   * position.\n   */\n  adjustOrbit(deltaTheta: number, deltaPhi: number, deltaRadius: number):\n      boolean {\n    const {theta, phi, radius} = this[$targetSpherical];\n\n    const targetTheta = theta - deltaTheta;\n    const targetPhi = phi - deltaPhi;\n    const targetRadius = radius + deltaRadius;\n\n    return this.setOrbit(targetTheta, targetPhi, targetRadius);\n  }\n\n  /**\n   * Update controls. In most cases, this will result in the camera\n   * interpolating its position and rotation until it lines up with the\n   * designated target orbital position.\n   *\n   * Time and delta are measured in milliseconds.\n   */\n  update(_time: number, delta: number) {\n    const deltaTheta = this[$targetSpherical].theta - this[$spherical].theta;\n    const deltaPhi = this[$targetSpherical].phi - this[$spherical].phi;\n    const deltaRadius = this[$targetSpherical].radius - this[$spherical].radius;\n    const distance = magnitude(deltaTheta, deltaPhi, deltaRadius);\n    const frames = delta / FRAME_MILLISECONDS;\n\n    // Velocity represents a scale along [0, 1] that changes based on the\n    // acceleration constraint. We only \"apply\" velocity when accelerating.\n    // When decelerating, we apply dampening exclusively.\n    const applyVelocity = distance > this[$options].decelerationMargin!;\n\n    if (applyVelocity) {\n      this[$velocity] = Math.min(\n          this[$velocity] + this[$options].acceleration! * frames, 1.0);\n    } else if (this[$velocity] > 0) {\n      this[$velocity] = Math.max(\n          this[$velocity] - this[$options].acceleration! * frames, 0.0);\n    }\n\n    const scale = this[$dampeningFactor] *\n        (applyVelocity ? this[$velocity] * frames : frames);\n\n    const scaledDeltaTheta = deltaTheta * scale;\n    const scaledDeltaPhi = deltaPhi * scale;\n    const scaledDeltaRadius = deltaRadius * scale;\n\n    let incrementTheta =\n        step(ORBIT_STEP_EDGE, Math.abs(scaledDeltaTheta)) * scaledDeltaTheta;\n    let incrementPhi =\n        step(ORBIT_STEP_EDGE, Math.abs(scaledDeltaPhi)) * scaledDeltaPhi;\n    let incrementRadius =\n        step(ORBIT_STEP_EDGE, Math.abs(scaledDeltaRadius)) * scaledDeltaRadius;\n\n    // NOTE(cdata): If we evaluate enough frames at once, then there is the\n    // possibility that the next incremental step will overshoot the target.\n    // If that is the case, we just jump straight to the target:\n    if (magnitude(incrementTheta, incrementPhi, incrementRadius) > distance) {\n      incrementTheta = deltaTheta;\n      incrementPhi = deltaPhi;\n      incrementRadius = deltaRadius;\n    }\n\n    this[$spherical].theta += incrementTheta;\n    this[$spherical].phi += incrementPhi;\n    this[$spherical].radius += incrementRadius;\n\n    // Derive the new camera position from the updated spherical:\n    this[$spherical].makeSafe();\n    this[$sphericalToPosition](this[$spherical], this.camera.position);\n\n    this.camera.lookAt(this.target);\n\n    // Dispatch change events only when the camera position changes due to\n    // the spherical->position derivation:\n    if (!this[$previousPosition].equals(this.camera.position)) {\n      this[$previousPosition].copy(this.camera.position);\n      this.dispatchEvent({type: 'change'});\n    } else {\n      this[$targetSpherical].copy(this[$spherical]);\n    }\n  }\n\n  private get[$canInteract](): boolean {\n    if (this[$options].interactionPolicy == 'allow-when-focused') {\n      const rootNode = this.element.getRootNode() as Document | ShadowRoot;\n      return rootNode.activeElement === this.element;\n    }\n\n    return this[$options].interactionPolicy === 'always-allow';\n  }\n\n  private get[$dampeningFactor](): number {\n    return MINIMUM_DAMPENING_FACTOR -\n        this[$options].dampeningScale! *\n        (MINIMUM_DAMPENING_FACTOR - MAXIMUM_DAMPENING_FACTOR)\n  }\n\n  private[$pixelLengthToSphericalAngle](pixelLength: number): number {\n    return TAU * pixelLength / this.element.clientHeight;\n  }\n\n  private[$positionToSpherical](position: Vector3, spherical: Spherical) {\n    vector3.copy(position).sub(this.target);\n    vector3.applyQuaternion(this[$upQuaternion]);\n\n    spherical.setFromVector3(vector3);\n    spherical.radius = vector3.length();\n  }\n\n  private[$sphericalToPosition](spherical: Spherical, position: Vector3) {\n    position.setFromSpherical(spherical);\n    position.applyQuaternion(this[$upQuaternionInverse]);\n    position.add(this.target);\n  }\n\n  private[$twoTouchDistance](touchOne: Touch, touchTwo: Touch): number {\n    const {clientX: xOne, clientY: yOne} = touchOne;\n    const {clientX: xTwo, clientY: yTwo} = touchTwo;\n    const xDelta = xTwo - xOne;\n    const yDelta = yTwo - yOne;\n\n    return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\n  }\n\n  private[$handlePointerMove](event: MouseEvent|TouchEvent) {\n    if (!this[$pointerIsDown] || !this[$canInteract]) {\n      return;\n    }\n\n    let handled = false;\n\n    // NOTE(cdata): We test event.type as some browsers do not have a global\n    // TouchEvent contructor.\n    if (TOUCH_EVENT_RE.test(event.type)) {\n      const {touches} = event as TouchEvent;\n\n      switch (this[$touchMode]) {\n        case 'zoom':\n          if (this[$lastTouches].length > 1 && touches.length > 1) {\n            const lastTouchDistance = this[$twoTouchDistance](\n                this[$lastTouches][0], this[$lastTouches][1]);\n            const touchDistance =\n                this[$twoTouchDistance](touches[0], touches[1]);\n            const radiusDelta = -1 * (touchDistance - lastTouchDistance) / 10.0;\n\n            handled = this.adjustOrbit(0, 0, radiusDelta);\n          }\n\n          break;\n        case 'rotate':\n          const {clientX: xOne, clientY: yOne} = this[$lastTouches][0];\n          const {clientX: xTwo, clientY: yTwo} = touches[0];\n\n          const deltaTheta = this[$pixelLengthToSphericalAngle](xTwo - xOne);\n          const deltaPhi = this[$pixelLengthToSphericalAngle](yTwo - yOne);\n\n          handled = this.adjustOrbit(deltaTheta, deltaPhi, 0)\n\n          break;\n      }\n\n      this[$lastTouches] = touches;\n    } else {\n      const {clientX: x, clientY: y} = event as MouseEvent;\n\n      const deltaTheta =\n          this[$pixelLengthToSphericalAngle](x - this[$lastPointerPosition].x);\n      const deltaPhi =\n          this[$pixelLengthToSphericalAngle](y - this[$lastPointerPosition].y);\n\n      handled = this.adjustOrbit(deltaTheta, deltaPhi, 0.0);\n\n      this[$lastPointerPosition].set(x, y);\n    }\n\n    if ((handled || this[$options].eventHandlingBehavior === 'prevent-all') &&\n        event.cancelable) {\n      event.preventDefault();\n    };\n  }\n\n  private[$handlePointerDown](event: MouseEvent|TouchEvent) {\n    this[$pointerIsDown] = true;\n\n    if (TOUCH_EVENT_RE.test(event.type)) {\n      const {touches} = event as TouchEvent;\n\n      switch (touches.length) {\n        default:\n        case 1:\n          this[$touchMode] = 'rotate';\n          break;\n        case 2:\n          this[$touchMode] = 'zoom';\n          break;\n      }\n\n      this[$lastTouches] = touches;\n    } else {\n      const {clientX: x, clientY: y} = event as MouseEvent;\n      this[$lastPointerPosition].set(x, y);\n      this.element.style.cursor = 'grabbing';\n    }\n  }\n\n  private[$handlePointerUp](_event: MouseEvent|TouchEvent) {\n    this.element.style.cursor = 'grab';\n    this[$pointerIsDown] = false;\n  }\n\n  private[$handleWheel](event: Event) {\n    if (!this[$canInteract]) {\n      return;\n    }\n\n    const deltaRadius = (event as WheelEvent).deltaY / 10.0;\n\n    if ((this.adjustOrbit(0, 0, deltaRadius) ||\n         this[$options].eventHandlingBehavior === 'prevent-all') &&\n        event.cancelable) {\n      event.preventDefault();\n    }\n  }\n\n  private[$handleKey](event: KeyboardEvent) {\n    // We track if the key is actually one we respond to, so as not to\n    // accidentally clober unrelated key inputs when the <model-viewer> has\n    // focus and eventHandlingBehavior is set to 'prevent-all'.\n    let relevantKey = false;\n    let handled = false;\n\n    switch (event.keyCode) {\n      case KeyCode.PAGE_UP:\n        relevantKey = true;\n        handled = this.adjustOrbit(0, 0, 1);\n        break;\n      case KeyCode.PAGE_DOWN:\n        relevantKey = true;\n        handled = this.adjustOrbit(0, 0, -1);\n        break;\n      case KeyCode.UP:\n        relevantKey = true;\n        handled = this.adjustOrbit(0, -KEYBOARD_ORBIT_INCREMENT, 0);\n        break;\n      case KeyCode.DOWN:\n        relevantKey = true;\n        handled = this.adjustOrbit(0, KEYBOARD_ORBIT_INCREMENT, 0);\n        break;\n      case KeyCode.LEFT:\n        relevantKey = true;\n        handled = this.adjustOrbit(-KEYBOARD_ORBIT_INCREMENT, 0, 0);\n        break;\n      case KeyCode.RIGHT:\n        relevantKey = true;\n        handled = this.adjustOrbit(KEYBOARD_ORBIT_INCREMENT, 0, 0);\n        break;\n    }\n\n    if (relevantKey &&\n        (handled || this[$options].eventHandlingBehavior === 'prevent-all') &&\n        event.cancelable) {\n      event.preventDefault();\n    }\n  }\n}\n"]}