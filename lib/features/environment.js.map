{"version":3,"file":"environment.js","sourceRoot":"","sources":["../../src/features/environment.js"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BackSide, BoxBufferGeometry, Color, Mesh, ShaderLib, ShaderMaterial, UniformsUtils} from 'three';\n\nimport {$needsRender, $onModelLoad, $renderer, $scene, $tick} from '../model-viewer-base.js';\n\nimport {IlluminationRole} from '../three-components/ModelScene.js';\nconst DEFAULT_BACKGROUND_COLOR = '#ffffff';\nconst DEFAULT_SHADOW_STRENGTH = 0.0;\nconst DEFAULT_EXPOSURE = 1.0;\nconst DEFAULT_STAGE_LIGHT_INTENSITY = 1.0;\nconst DEFAULT_ENVIRONMENT_INTENSITY = 1.0;\n\nconst WHITE = new Color('#ffffff');\n\nconst $currentEnvironmentMap = Symbol('currentEnvironmentMap');\nconst $applyEnvironmentMap = Symbol('applyEnvironmentMap');\nconst $setShadowLightColor = Symbol('setShadowLightColor');\nconst $deallocateTextures = Symbol('deallocateTextures');\nconst $updateLighting = Symbol('updateLighting');\nconst $updateToneMapping = Symbol('updateToneMapping');\nconst $updateShadow = Symbol('updateShadow');\nconst $updateEnvironment = Symbol('updateEnvironment');\nconst $cancelEnvironmentUpdate = Symbol('cancelEnvironmentUpdate');\n\nexport const EnvironmentMixin = (ModelViewerElement) => {\n  return class extends ModelViewerElement {\n    static get properties() {\n      return {\n        ...super.properties,\n        environmentImage: {type: String, attribute: 'environment-image'},\n        environmentIntensity:\n            {type: Number, attribute: 'environment-intensity'},\n        backgroundImage: {type: String, attribute: 'background-image'},\n        backgroundColor: {type: String, attribute: 'background-color'},\n        experimentalPmrem: {type: Boolean, attribute: 'experimental-pmrem'},\n        shadowIntensity: {type: Number, attribute: 'shadow-intensity'},\n        stageLightIntensity: {type: Number, attribute: 'stage-light-intensity'},\n        exposure: {type: Number, attribute: 'exposure'}\n      };\n    }\n\n    constructor(...args) {\n      super(...args);\n      this.shadowIntensity = DEFAULT_SHADOW_STRENGTH;\n      this.stageLightIntensity = DEFAULT_STAGE_LIGHT_INTENSITY;\n      this.environmentIntensity = DEFAULT_ENVIRONMENT_INTENSITY;\n      this.exposure = DEFAULT_EXPOSURE;\n      this[$cancelEnvironmentUpdate] = null;\n    }\n\n    update(changedProperties) {\n      super.update(changedProperties);\n\n      if (changedProperties.has('shadowIntensity')) {\n        this[$updateShadow]();\n      }\n\n      if (changedProperties.has('exposure')) {\n        this[$updateToneMapping]();\n      }\n\n      if (changedProperties.has('environmentIntensity') ||\n          changedProperties.has('stageLightIntensity')) {\n        this[$updateLighting]();\n      }\n\n      if (changedProperties.has('environmentImage') ||\n          changedProperties.has('backgroundImage') ||\n          changedProperties.has('backgroundColor') ||\n          changedProperties.has('experimentalPmrem')) {\n        this[$updateEnvironment]();\n      }\n    }\n\n    firstUpdated(changedProperties) {\n      // In case no environment-related properties were confiured, we should\n      // make sure that the environment is updated at least once:\n      if (this[$cancelEnvironmentUpdate] == null) {\n        this[$updateEnvironment]();\n      }\n    }\n\n    [$onModelLoad](e) {\n      super[$onModelLoad](e);\n\n      if (this[$currentEnvironmentMap]) {\n        this[$applyEnvironmentMap](this[$currentEnvironmentMap]);\n      }\n    }\n\n    async[$updateEnvironment]() {\n      const {backgroundImage, environmentImage, experimentalPmrem: pmrem} =\n          this;\n      let {backgroundColor} = this;\n\n      if (this[$cancelEnvironmentUpdate] != null) {\n        this[$cancelEnvironmentUpdate]();\n        this[$cancelEnvironmentUpdate] = null;\n      }\n\n      const {textureUtils} = this[$renderer];\n\n      if (textureUtils == null) {\n        return;\n      }\n\n      try {\n        const {environmentMap, skybox} =\n            await new Promise(async (resolve, reject) => {\n              const texturesLoad = textureUtils.generateEnvironmentMapAndSkybox(\n                  backgroundImage, environmentImage, {pmrem});\n              this[$cancelEnvironmentUpdate] = () => reject(texturesLoad);\n              resolve(await texturesLoad);\n            });\n\n        this[$deallocateTextures]();\n\n        if (skybox != null) {\n          this[$scene].background = skybox;\n          this[$setShadowLightColor](WHITE);\n        } else {\n          if (!backgroundColor) {\n            backgroundColor = DEFAULT_BACKGROUND_COLOR;\n          }\n\n          const parsedColor = new Color(backgroundColor);\n          this[$scene].background = parsedColor;\n          this[$setShadowLightColor](parsedColor);\n        }\n\n        this[$applyEnvironmentMap](environmentMap);\n      } catch (errorOrPromise) {\n        if (errorOrPromise instanceof Error) {\n          this[$applyEnvironmentMap](null);\n          throw errorOrPromise;\n        }\n\n        const {environmentMap, skybox} = await errorOrPromise;\n\n        if (environmentMap != null) {\n          environmentMap.dispose();\n        }\n\n        if (skybox != null) {\n          skybox.dispose();\n        }\n      }\n    }\n\n    /**\n     * Sets the Model to use the provided environment map,\n     * or `null` if the Model should remove its' environment map.\n     *\n     * @param {THREE.Texture} environmentMap\n     */\n    [$applyEnvironmentMap](environmentMap) {\n      this[$currentEnvironmentMap] = environmentMap;\n      this[$scene].model.applyEnvironmentMap(this[$currentEnvironmentMap]);\n      this.dispatchEvent(new CustomEvent('environment-change'));\n\n      this[$updateLighting]();\n      this[$needsRender]();\n    }\n\n    [$updateShadow]() {\n      this[$scene].shadow.intensity = this.shadowIntensity;\n      this[$needsRender]();\n    }\n\n    [$updateToneMapping]() {\n      this[$renderer].exposure = this.exposure;\n      this[$needsRender]();\n    }\n\n    [$updateLighting]() {\n      const scene = this[$scene];\n      const illuminationRole = this.experimentalPmrem ?\n          IlluminationRole.Secondary :\n          IlluminationRole.Primary;\n\n      scene.configureStageLighting(this.stageLightIntensity, illuminationRole);\n      scene.model.setEnvironmentMapIntensity(this.environmentIntensity);\n    }\n\n    [$setShadowLightColor](color) {\n      this[$scene].shadowLight.color.copy(color);\n      this[$scene].shadowLight.color.lerpHSL(WHITE, 0.5);\n    }\n\n    [$deallocateTextures]() {\n      const background = this[$scene].background;\n      if (background && background.dispose) {\n        background.dispose();\n      }\n      if (this[$currentEnvironmentMap]) {\n        this[$currentEnvironmentMap].dispose();\n        this[$currentEnvironmentMap] = null;\n      }\n    }\n  }\n};\n"]}